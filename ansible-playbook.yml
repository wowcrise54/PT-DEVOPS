- name: Setup PostgreSQL master and Telegram Bot
  hosts: master
  become: true
  vars:
    db_user: "{{ lookup('env', 'DB_USER') }}"
    db_password: "{{ lookup('env', 'DB_PASSWORD') }}"
    db_name: "{{ lookup('env', 'DB_DATABASE') }}"
    db_replication_user: "{{ lookup('env', 'DB_REPL_USER') }}"
    db_replication_password: "{{ lookup('env', 'DB_REPL_PASSWORD') }}"
    tg_bot_repo: "https://github.com/wowcrise54/PT-DEVOPS"
    tg_bot_dir: "/opt/telegram_bot"
    pg_version: "14"  
 
  tasks:
    - name: Install required packages
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3
          - python3-pip
          - git
        state: present
        update_cache: yes
  
    - name: Ensure PostgreSQL service is running
      systemd:
        name: postgresql
        state: enabled
        enabled: true

    - name: Set up PostgreSQL users
      postgresql_user:
        name: "{{db_user}}"
        password: "{{db_password}}"
        state: present

    - name: Set up postgres databases
      postgresql_db:
        name: "{{db_name}}"
        owner: "{{db_user}}"
        state: present

    - name: Set up replication user
      postgresql_user:
        name: "{{db_replication_user}}"
        password: "{{db_replication_password}}"
        priv: replication
        state: present
    
    - name: Configure PostgreSQL for replication
      blockinfile:
        path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
        block: |
          wal_level = replica
          max_wal_senders = 10
          max_replication_slots = 10
          hot_standby = on
          listen_addresses = '*'

    - name: Install git repository
      ansible.builtin.git:
        clone: "{{tg_bot_repo}}"
        dest: ~/tg_bot
        state: present
        update: yes

    - name: Configure PostgreSQL pg_hba.conf
      lineinfile:
        path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
        line: "host replication {{ db_replication_user }} 0.0.0.0/0 md5"
        state: present
    
    - name: Create postgres table (one)
      postgresql_table:
        db: "{{db_name}}"
        table: emails
        colums:
          - name: id 
            type: serial
            primary_key: true
          - name: email
            type: varchar(100)
            not_null: true

    - name: Create postgres table (second)
      postgresql_table:
      db: "{{db_name}}"
      table: phones_numbers
      colums:
        - name: id
          type: serial
          primary_key: true
        - name: phone_number
          type: varchar(30)
          not_null: true

    - name: Insert data into table (one)
      postgresql_query:
        db: "{{db_name}}"
        login_user: "{{db_user}}"
        login_password: "{{db_password}}"
        login_host: "{{db_}}"

        query: "INSERT INTO emails (email) VALUES ('test@yandex.ru', 'example@gmail.com');"

    - name: Insert data into table (second)
      postgresql_query:
        db: "{{db_name}}"
        login_user: "{{db_user}}"
        login_password: "{{db_password}}"
        login_host: "{{db_}}"

        query: "INSERT INTO phone_numbers (phone_number) VALUES ('+7(950)2233212', '8(800)232-23-42')"

    - name: Restart PostgreSQL to apply changes
      systemd:
        name: postgresql
        state: restarted

    - name: Install python requirements
      pip: 
        requirements: "~/tg_bot/requirements.txt"

    - name: Tg bot start 
      ansible.builtin.shell: cd ~/tg_bot && python telegram_bot.py

- name: Setup PostgreSQL replica
  hosts: slave
  become: true
  vars: 
    db_replication_user: "{{ lookup('env', 'DB_REPL_USER') }}"
    db_replication_password: "{{ lookup('env', 'DB_REPL_PASSWORD') }}"
    db_repl_address: "{{ lookup('env' 'DB_REPL_ADDRESS') }}"
    pg_version: "14"

  tasks:
    - name: Install required packages
      apt: 
        name: 
          - postgresql
          - postgresql-contrib
        state: present
        update_cache: yes 

    - name: Stop PostgreSQL service
      systemd:
        name: postgresql
        state: stopped
    
    - name: Remove old data directory
      ansible.builtin.shell: rm -rf /var/lib/postgresql/{{pg_version}}/main/*

    - name: Test replica
      become_user: postgres
      ansible.builtin.shell: pg_basebackup -R -h {{db_repl_address}} -U {{db_replication_user}} -D /var/lib/postgresql/{{pg_version}}/main -P

    - name: Start Postgres
      systemd:
        name: postgresql
        state: started
        enabled: true
    


